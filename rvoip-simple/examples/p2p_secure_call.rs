//! Peer-to-Peer Secure Calling Example
//!
//! This example demonstrates how to set up secure peer-to-peer calling
//! using ZRTP encryption without requiring a central server.

use rvoip_simple::*;
use tracing::{info, warn, error};
use tokio::time::{sleep, Duration};

#[tokio::main]
async fn main() -> Result<(), Box<dyn std::error::Error>> {
    // Initialize logging
    tracing_subscriber::fmt()
        .with_max_level(tracing::Level::INFO)
        .init();

    info!("üîí Starting P2P Secure Calling Example");

    // Simulate two users for P2P calling
    tokio::try_join!(
        setup_alice(),
        setup_bob()
    )?;

    info!("‚úÖ P2P secure calling example completed!");
    Ok(())
}

/// Set up Alice's P2P client
async fn setup_alice() -> Result<(), SimpleVoipError> {
    info!("üë© Setting up Alice's P2P client");

    // Create P2P client for Alice
    let alice = SimpleVoipClient::p2p()
        .with_display_name("Alice P2P")
        .with_media(MediaConfig::high_quality())
        .connect().await?;

    info!("‚úÖ Alice connected");
    info!("   Security: ZRTP (end-to-end encryption)");
    info!("   Mode: Peer-to-peer (no server required)");
    info!("   Audio quality: High quality");

    // Subscribe to events
    let mut events = alice.subscribe_events();

    // Simulate Alice making a call to Bob
    info!("üìû Alice calling Bob...");
    match alice.make_call("bob@p2p.local").await {
        Ok(mut call) => {
            info!("‚úÖ Alice's call initiated: {}", call.id);
            
            // Show ZRTP security features
            info!("üîê ZRTP Security Features:");
            info!("   ‚Ä¢ Automatic key exchange");
            info!("   ‚Ä¢ Perfect forward secrecy");
            info!("   ‚Ä¢ SAS (Short Authentication String) verification");
            info!("   ‚Ä¢ Protection against man-in-the-middle attacks");

            // Simulate call progression
            sleep(Duration::from_secs(2)).await;
            
            // Simulate call being answered
            call.update_state(CallState::Answered);
            info!("üìû Alice: Call answered by Bob!");

            // Show secure media session
            call.emit_media_connected();
            info!("üéµ Alice: Secure media session established");
            info!("   ‚Ä¢ Audio encrypted with AES-256");
            info!("   ‚Ä¢ Keys derived from ZRTP exchange");
            info!("   ‚Ä¢ SAS for verification: 'golf-hotel-ocean'");

            // Simulate some conversation time
            sleep(Duration::from_secs(3)).await;

            // Demonstrate SAS verification
            info!("üîç Alice: SAS verification recommended");
            info!("   Alice asks Bob: 'Do you see golf-hotel-ocean?'");
            sleep(Duration::from_millis(500)).await;
            info!("   Bob confirms: 'Yes, I see golf-hotel-ocean'");
            info!("‚úÖ Alice: SAS verified - call is secure!");

            // End call
            call.hangup().await?;
            info!("üìû Alice: Call ended");
        }
        Err(e) => {
            warn!("‚ö†Ô∏è  Alice's call failed (expected in demo): {}", e);
        }
    }

    // Show P2P advantages
    info!("üåü P2P Calling Advantages:");
    info!("   ‚Ä¢ No central server required");
    info!("   ‚Ä¢ End-to-end encryption by default");
    info!("   ‚Ä¢ Lower latency (direct connection)");
    info!("   ‚Ä¢ Privacy protection (no server logging)");
    info!("   ‚Ä¢ Works behind NAT (with ICE/STUN)");

    Ok(())
}

/// Set up Bob's P2P client
async fn setup_bob() -> Result<(), SimpleVoipError> {
    info!("üë® Setting up Bob's P2P client");

    // Small delay to offset from Alice
    sleep(Duration::from_millis(100)).await;

    // Create P2P client for Bob
    let bob = SimpleVoipClient::p2p()
        .with_display_name("Bob P2P")
        .with_media(MediaConfig::high_quality())
        .with_auto_answer(true) // Auto-answer for demo
        .connect().await?;

    info!("‚úÖ Bob connected and ready to receive calls");

    // Subscribe to events
    let mut events = bob.subscribe_events();

    // Simulate Bob receiving Alice's call
    sleep(Duration::from_secs(1)).await;
    
    info!("üìû Bob: Incoming call from Alice detected");
    info!("üîê Bob: ZRTP negotiation starting...");

    // Simulate ZRTP handshake
    sleep(Duration::from_millis(500)).await;
    info!("‚úÖ Bob: ZRTP handshake completed");
    info!("   ‚Ä¢ DH key exchange successful");
    info!("   ‚Ä¢ Shared secret established");
    info!("   ‚Ä¢ SAS computed: 'golf-hotel-ocean'");

    // Auto-answer the call
    match bob.answer_call("alice-call-123").await {
        Ok(mut call) => {
            info!("üìû Bob: Call answered!");
            
            // Show encrypted media session
            sleep(Duration::from_millis(200)).await;
            call.emit_media_connected();
            info!("üéµ Bob: Secure media session active");
            
            // Demonstrate DTMF in secure call
            sleep(Duration::from_secs(2)).await;
            call.send_dtmf_string("*123#").await?;
            info!("üî¢ Bob: Sent secure DTMF sequence");

            // Simulate conversation
            sleep(Duration::from_secs(2)).await;
            
            info!("üìû Bob: Call completed successfully");
        }
        Err(e) => {
            warn!("‚ö†Ô∏è  Bob's answer failed: {}", e);
        }
    }

    // Show ZRTP security analysis
    info!("üõ°Ô∏è  ZRTP Security Analysis:");
    info!("   ‚Ä¢ No PKI infrastructure required");
    info!("   ‚Ä¢ Resistant to quantum computer attacks");
    info!("   ‚Ä¢ Real-time key agreement");
    info!("   ‚Ä¢ Automatic media encryption");
    info!("   ‚Ä¢ Voice quality preserved");

    Ok(())
}

/// Demonstrate P2P discovery mechanisms
#[allow(dead_code)]
async fn demonstrate_p2p_discovery() -> Result<(), SimpleVoipError> {
    info!("üîç P2P Discovery Mechanisms");

    info!("1. mDNS/Bonjour Discovery:");
    info!("   ‚Ä¢ Local network service discovery");
    info!("   ‚Ä¢ '_sip._udp.local' service advertising");
    info!("   ‚Ä¢ Automatic peer detection");

    info!("2. Direct IP Addressing:");
    info!("   ‚Ä¢ Manual IP entry: '192.168.1.100:5060'");
    info!("   ‚Ä¢ Port forwarding for external access");
    info!("   ‚Ä¢ Static configuration files");

    info!("3. DHT (Distributed Hash Table):");
    info!("   ‚Ä¢ Decentralized peer discovery");
    info!("   ‚Ä¢ Username -> IP address mapping");
    info!("   ‚Ä¢ No central directory required");

    info!("4. QR Code Exchange:");
    info!("   ‚Ä¢ Visual peer information sharing");
    info!("   ‚Ä¢ Conference room scenarios");
    info!("   ‚Ä¢ One-time connection setup");

    Ok(())
}

/// Show P2P network traversal
#[allow(dead_code)]
async fn demonstrate_nat_traversal() -> Result<(), SimpleVoipError> {
    info!("üåê P2P NAT Traversal Techniques");

    info!("1. ICE (Interactive Connectivity Establishment):");
    info!("   ‚Ä¢ Gathering local, server-reflexive, and relay candidates");
    info!("   ‚Ä¢ Connectivity checks between all candidate pairs");
    info!("   ‚Ä¢ Best path selection for media");

    info!("2. STUN (Session Traversal Utilities for NAT):");
    info!("   ‚Ä¢ Discover public IP address and port");
    info!("   ‚Ä¢ Determine NAT type and behavior");
    info!("   ‚Ä¢ Enable direct peer-to-peer connection");

    info!("3. TURN (Traversal Using Relays around NAT):");
    info!("   ‚Ä¢ Relay server for symmetric NATs");
    info!("   ‚Ä¢ Fallback when direct connection fails");
    info!("   ‚Ä¢ Bandwidth cost but guaranteed connectivity");

    info!("4. UPnP (Universal Plug and Play):");
    info!("   ‚Ä¢ Automatic port forwarding");
    info!("   ‚Ä¢ Home router configuration");
    info!("   ‚Ä¢ Simplified NAT traversal");

    Ok(())
}

/// Performance comparison: P2P vs Server-based
#[allow(dead_code)]
async fn performance_comparison() {
    info!("üìä Performance Comparison: P2P vs Server-based");

    info!("P2P Calling:");
    info!("   ‚úÖ Latency: 20-50ms (direct connection)");
    info!("   ‚úÖ Bandwidth: Peer-to-peer, no server load");
    info!("   ‚úÖ Privacy: End-to-end encryption");
    info!("   ‚úÖ Scalability: No central bottleneck");
    info!("   ‚ùå Discovery: More complex peer finding");
    info!("   ‚ùå NAT: Requires STUN/TURN for some networks");

    info!("Server-based Calling:");
    info!("   ‚ùå Latency: 50-150ms (via server)");
    info!("   ‚ùå Bandwidth: Server processing overhead");
    info!("   ‚ùå Privacy: Server can intercept calls");
    info!("   ‚ùå Scalability: Server capacity limits");
    info!("   ‚úÖ Discovery: Centralized user directory");
    info!("   ‚úÖ NAT: Server handles all traversal");

    info!("üí° Recommendation: Use P2P for:");
    info!("   ‚Ä¢ High-security requirements");
    info!("   ‚Ä¢ Low-latency needs (gaming, trading)");
    info!("   ‚Ä¢ Private communications");
    info!("   ‚Ä¢ Small group calling");
    info!("   ‚Ä¢ Decentralized applications");
} 