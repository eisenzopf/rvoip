use std::str::FromStr;

use crate::types::{
    uri::Uri,
    to::To,
    Address,
    TypedHeader,
    Param,
};
use crate::builder::{SimpleRequestBuilder, SimpleResponseBuilder};
use crate::builder::headers::HeaderSetter;

/// To header builder
///
/// This trait provides builder methods for the To header in SIP messages, as defined
/// in [RFC 3261 Section 20.39](https://datatracker.ietf.org/doc/html/rfc3261#section-20.39).
///
/// ## SIP To Header Overview
///
/// The To header field specifies the logical recipient of a SIP request.
/// It consists of a display name, a URI, and optional parameters - most importantly
/// the tag parameter, which is used for dialog identification.
///
/// To headers are critical for:
/// - Identifying the intended recipient of a SIP request
/// - Creating and maintaining dialogs between endpoints
/// - Ensuring responses are correctly formatted
/// - Called party identification in telephony applications
///
/// ## Tag Parameter
///
/// The tag parameter in the To header is:
/// - Added by the UAS (recipient) in responses
/// - Not present in initial requests (client must not set it)
/// - Combined with the From tag and Call-ID to form a dialog identifier
/// - Required in all responses (except 100 Trying) and in-dialog requests
///
/// ## Common Use Cases
///
/// - **Call routing**: Identifying the recipient of a call
/// - **Dialog creation**: Establishing the recipient's side of a dialog
/// - **Federation**: Calling between different SIP domains
/// - **Service addressing**: Directing requests to specific services
/// - **Conference identification**: Addressing conference bridges
///
/// ## Real-world Applications
///
/// - **Enterprise telephony**: Identifying call recipients by name and extension
/// - **Service discovery**: Addressing specific SIP services
/// - **Contact centers**: Routing calls to appropriate departments
/// - **SIP trunking**: Mapping PSTN numbers to SIP addresses
///
/// # Examples
///
/// ## Enterprise Direct Extension Dialing
///
/// ```rust
/// use rvoip_sip_core::builder::SimpleRequestBuilder;
/// use rvoip_sip_core::builder::headers::ToBuilderExt;
/// use rvoip_sip_core::builder::headers::FromBuilderExt;
/// use rvoip_sip_core::types::Method;
///
/// // Scenario: Calling a specific extension in a company directory
///
/// // Create an INVITE to a specific employee
/// let invite = SimpleRequestBuilder::new(Method::Invite, "sip:bob@company.example").unwrap()
///     .from("Alice", "sip:alice@company.example", Some("alic67890"))
///     .to("Bob Smith", "sip:bob@company.example", None)
///     .contact("<sip:alice@192.0.2.2:5060>", None)
///     .build();
///
/// // Company PBX will route the call to Bob's extension
/// ```
///
/// ## SIP Trunk Calling to PSTN
///
/// ```rust
/// use rvoip_sip_core::builder::SimpleRequestBuilder;
/// use rvoip_sip_core::builder::headers::ToBuilderExt;
/// use rvoip_sip_core::builder::headers::FromBuilderExt;
/// use rvoip_sip_core::types::Method;
///
/// // Scenario: Enterprise calling out to PSTN through a SIP trunk
///
/// // Create an INVITE to an E.164 phone number
/// let invite = SimpleRequestBuilder::new(Method::Invite, "sip:+15551234567@sip-trunk.example.net").unwrap()
///     .from("Example Corp", "sip:+14085551000@company.example", Some("pbx12345"))
///     .to("External User", "sip:+15551234567@sip-trunk.example.net", None)
///     .contact("<sip:pbx@203.0.113.5:5060;transport=tls>", None)
///     .build();
///
/// // The To header identifies the PSTN destination through the SIP trunk
/// ```
///
/// ## SIP Auto-Attendant Response
///
/// ```rust
/// use rvoip_sip_core::builder::SimpleResponseBuilder;
/// use rvoip_sip_core::builder::headers::ToBuilderExt;
/// use rvoip_sip_core::builder::headers::FromBuilderExt;
/// use rvoip_sip_core::builder::headers::cseq::CSeqBuilderExt;
/// use rvoip_sip_core::types::{StatusCode, Method};
///
/// // Scenario: Auto-attendant responding to an incoming call
///
/// // Create a 200 OK response with a To tag
/// let response = SimpleResponseBuilder::new(StatusCode::Ok, None)
///     .from("Caller", "sip:user@example.net", Some("caller-xyz"))
///     .to("Company Auto-Attendant", "sip:reception@company.example", Some("ivr-abc123"))
///     .cseq_with_method(101, Method::Invite)
///     .contact("<sip:ivr@10.0.1.100:5060>", None)
///     .build();
///
/// // The To tag is generated by the UAS and helps establish the dialog
/// ```
pub trait ToBuilderExt {
    /// Add a To header with an optional tag parameter.
    ///
    /// Creates and adds a To header with the specified display name, URI, and optional tag.
    /// The To header identifies the logical recipient of a SIP request. The tag parameter
    /// is normally added by the recipient in responses, not in the initial request.
    ///
    /// # Parameters
    /// - `display_name`: The display name for the To header (e.g., "Bob Smith")
    /// - `uri`: The URI for the To header (e.g., "sip:bob@example.com")
    /// - `tag`: Optional tag parameter for dialog identification (typically only in responses)
    ///
    /// # Returns
    /// Self for method chaining
    ///
    /// # Examples
    ///
    /// ```rust
    /// use rvoip_sip_core::builder::SimpleRequestBuilder;
    /// use rvoip_sip_core::builder::headers::ToBuilderExt;
    /// use rvoip_sip_core::types::Method;
    ///
    /// // Create a REGISTER request to a domain registrar
    /// let register = SimpleRequestBuilder::new(Method::Register, "sip:example.com").unwrap()
    ///     .from("User", "sip:user@example.com", Some("reg-tag-123"))
    ///     .to("User", "sip:user@example.com", None)
    ///     .contact("<sip:user@192.0.2.15:5060>", None)
    ///     .build();
    ///
    /// // In REGISTER requests, From and To typically have the same URI
    /// // but only From has a tag in the initial request
    /// ```
    fn to(self, display_name: &str, uri: &str, tag: Option<&str>) -> Self;
}

impl ToBuilderExt for SimpleRequestBuilder {
    fn to(self, display_name: &str, uri: &str, tag: Option<&str>) -> Self {
        match Uri::from_str(uri) {
            Ok(uri) => {
                let mut address = Address::new_with_display_name(display_name, uri);
                
                // Add tag if provided
                if let Some(tag_value) = tag {
                    address.params.push(Param::tag(tag_value));
                }
                
                self.header(TypedHeader::To(To::new(address)))
            },
            Err(_) => {
                // Best effort - if URI parsing fails, still try to continue with a simple string
                let uri_str = uri.to_string();
                let mut address = Address::new_with_display_name(display_name, Uri::custom(&uri_str));
                
                // Add tag if provided
                if let Some(tag_value) = tag {
                    address.params.push(Param::tag(tag_value));
                }
                
                self.header(TypedHeader::To(To::new(address)))
            }
        }
    }
}

impl ToBuilderExt for SimpleResponseBuilder {
    fn to(self, display_name: &str, uri: &str, tag: Option<&str>) -> Self {
        match Uri::from_str(uri) {
            Ok(uri) => {
                let mut address = Address::new_with_display_name(display_name, uri);
                
                // Add tag if provided
                if let Some(tag_value) = tag {
                    address.params.push(Param::tag(tag_value));
                }
                
                self.header(TypedHeader::To(To::new(address)))
            },
            Err(_) => {
                // Best effort - if URI parsing fails, still try to continue with a simple string
                let uri_str = uri.to_string();
                let mut address = Address::new_with_display_name(display_name, Uri::custom(&uri_str));
                
                // Add tag if provided
                if let Some(tag_value) = tag {
                    address.params.push(Param::tag(tag_value));
                }
                
                self.header(TypedHeader::To(To::new(address)))
            }
        }
    }
}

#[cfg(test)]
mod tests {
    use super::*;
    use crate::types::{Method, StatusCode};
    
    #[test]
    fn test_request_to_header() {
        // Test with valid URI
        let request = SimpleRequestBuilder::invite("sip:bob@example.com").unwrap()
            .to("Bob", "sip:bob@example.com", Some("tag5678"))
            .build();
            
        let to_header = request.to().unwrap();
        assert_eq!(to_header.address().display_name(), Some("Bob"));
        assert_eq!(to_header.address().uri().to_string(), "sip:bob@example.com");
        assert_eq!(to_header.tag(), Some("tag5678"));
        
        // Test without tag
        let request = SimpleRequestBuilder::invite("sip:bob@example.com").unwrap()
            .to("Bob", "sip:bob@example.com", None)
            .build();
            
        let to_header = request.to().unwrap();
        assert_eq!(to_header.tag(), None);
        
        // Test with invalid URI (should create a custom URI)
        let request = SimpleRequestBuilder::invite("sip:bob@example.com").unwrap()
            .to("Bob", "invalid-uri", Some("tag5678"))
            .build();
            
        let to_header = request.to().unwrap();
        assert_eq!(to_header.address().display_name(), Some("Bob"));
        assert!(to_header.address().uri().to_string().contains("invalid-uri"));
    }
    
    #[test]
    fn test_response_to_header() {
        // Test with valid URI
        let response = SimpleResponseBuilder::ok()
            .from("Alice", "sip:alice@example.com", Some("tag1234"))
            .to("Bob", "sip:bob@example.com", Some("tag5678"))
            .call_id("test-call-id")
            .cseq(1, Method::Invite)
            .build();
            
        let to_header = response.to().unwrap();
        assert_eq!(to_header.address().display_name(), Some("Bob"));
        assert_eq!(to_header.address().uri().to_string(), "sip:bob@example.com");
        assert_eq!(to_header.tag(), Some("tag5678"));
        
        // Test without tag
        let response = SimpleResponseBuilder::ok()
            .from("Alice", "sip:alice@example.com", Some("tag1234"))
            .to("Bob", "sip:bob@example.com", None)
            .call_id("test-call-id")
            .cseq(1, Method::Invite)
            .build();
            
        let to_header = response.to().unwrap();
        assert_eq!(to_header.tag(), None);
        
        // Test with invalid URI (should create a custom URI)
        let response = SimpleResponseBuilder::ok()
            .from("Alice", "sip:alice@example.com", Some("tag1234"))
            .to("Bob", "invalid-uri", Some("tag5678"))
            .call_id("test-call-id")
            .cseq(1, Method::Invite)
            .build();
            
        let to_header = response.to().unwrap();
        assert_eq!(to_header.address().display_name(), Some("Bob"));
        assert!(to_header.address().uri().to_string().contains("invalid-uri"));
    }
} 