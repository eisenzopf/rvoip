use crate::common::basic_operators::*;

const LPC_WINDOW: [Word16; 240] = [
    2621, 2624, 2632, 2645, 2662, 2684, 2711, 2743, 2779, 2820, 2866, 2917, 2972, 3032, 3096, 3165, 3238, 3316, 3398, 3484, 3574, 3668, 3766, 3868, 3974, 4083, 4196, 4312, 4431, 4554, 4679, 4808, 4939, 5073, 5210, 5349, 5491, 5635, 5782, 5931, 6082, 6235, 6390, 6547, 6706, 6867, 7029, 7193, 7358, 7525, 7693, 7862, 8032, 8204, 8376, 8550, 8724, 8899, 9075, 9251, 9428, 9605, 9783, 9961, 10139, 10318, 10496, 10675, 10854, 11033, 11212, 11391, 11570, 11749, 11928, 12106, 12284, 12462, 12640, 12817, 12994, 13170, 13346, 13521, 13696, 13870, 14043, 14215, 14387, 14557, 14727, 14895, 15063, 15229, 15395, 15559, 15722, 15884, 16045, 16205, 16363, 16520, 16676, 16830, 16983, 17135, 17285, 17434, 17581, 17727, 17871, 18014, 18155, 18295, 18433, 18570, 18705, 18838, 18970, 19100, 19228, 19355, 19480, 19603, 19725, 19845, 19963, 20080, 20195, 20308, 20419, 20529, 20637, 20743, 20847, 20950, 21050, 21149, 21246, 21341, 21434, 21525, 21615, 21702, 21788, 21871, 21953, 22033, 22111, 22187, 22261, 22333, 22403, 22471, 22537, 22601, 22663, 22723, 22781, 22837, 22891, 22943, 22993, 23041, 23087, 23131, 23173, 23213, 23251, 23287, 23321, 23353, 23383, 23411, 23437, 23461, 23483, 23503, 23521, 23537, 23551, 23563, 23573, 23581, 23587, 23591, 23593, 23593, 23591, 23587, 23581, 23573, 23563, 23551, 23537, 23521, 23503, 23483, 23461, 23437, 23411, 23383, 23353, 23321, 23287, 23251, 23213, 23173, 23131, 23087, 23041, 22993, 22943, 22891, 22837, 22781, 22723, 22663, 22601, 22537, 22471, 22403, 22333, 22261, 22187, 22111, 22033, 21953, 21871, 21788, 21702, 21615, 21525, 21434, 21341, 21246, 21149, 21050, 20950, 20847, 20743, 20637, 20529, 20419, 20308, 20195, 20080, 19963, 19845, 19725, 19603, 19480, 19355, 19228, 19100, 18970, 18838, 18705, 18570, 18433, 18295, 18155, 18014, 17871, 17727, 17581, 17434, 17285, 17135, 16983, 16830, 16676, 16520, 16363, 16205, 16045, 15884, 15722, 15559, 15395, 15229, 15063, 14895, 14727, 14557, 14387, 14215, 14043, 13870, 13696, 13521, 13346, 13170, 12994, 12817, 12640, 12462, 12284, 12106, 11928, 11749, 11570, 11391, 11212, 11033, 10854, 10675, 10496, 10318, 10139, 9961, 9783, 9605, 9428, 9251, 9075, 8899, 8724, 8550, 8376, 8204, 8032, 7862, 7693, 7525, 7358, 7193, 7029, 6867, 6706, 6547, 6390, 6235, 6082, 5931, 5782, 5635, 5491, 5349, 5210, 5073, 4939, 4808, 4679, 4554, 4431, 4312, 4196, 4083, 3974, 3868, 3766, 3668, 3574, 3484, 3398, 3316, 3238, 3165, 3096, 3032, 2972, 2917, 2866, 2820, 2779, 2743, 2711, 2684, 2662, 2645, 2632, 2624, 2621
];

const LAG_WINDOW: [Word16; 10] = [32766, 32761, 32752, 32739, 32722, 32701, 32676, 32647, 32614, 32577];

pub fn autocorrelation(speech: &[Word16], r: &mut [Word32]) {
    let mut s_prime = [0i16; 240];
    for i in 0..240 {
        s_prime[i] = shr(round(L_mult(speech[i], LPC_WINDOW[i])), 1);
    }

    for k in 0..=10 {
        let mut sum: Word32 = 0;
        for n in k..240 {
            sum = L_mac(sum, s_prime[n], s_prime[n - k]);
        }
        r[k] = sum;
    }

    let r0 = r[0];
    r[0] = L_mac(r[0], round(L_mult(r0 as Word16, 1)), 1);

    for k in 1..=10 {
        r[k] = L_mult(r[k] as Word16, LAG_WINDOW[k-1]);
    }
}

pub fn levinson_durbin(r: &[Word32], a: &mut [Word16]) {
    let mut rc = [0i16; 10];
    let mut ac = [0i16; 11];
    let mut old_a = [0i16; 10];
    let mut e: Word32 = r[0];

    ac[0] = 4096; // 1.0 in Q12

    for i in 0..10 {
        let mut s: Word32 = 0;
        for j in 0..=i {
            s = L_mac(s, ac[j], r[i + 1 - j] as Word16);
        }
        rc[i] = -round(L_shl(s, 16) / e);

        for j in 0..=i {
            old_a[j] = ac[j];
        }

        for j in 1..=i + 1 {
            ac[j] = round(L_mac(L_mult(old_a[j], 4096), rc[i], old_a[i + 1 - j]));
        }

        e = L_mac(L_mult(e as Word16, 4096), -round(L_mult(rc[i], rc[i])), e as Word16);
    }

    for i in 0..11 {
        a[i] = ac[i];
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_lpc() {
        let speech = [8192; 240];
        let mut r = [0; 11];
        let mut a = [0; 11];

        autocorrelation(&speech, &mut r);
        levinson_durbin(&r, &mut a);

        let expected_a = [4096, -3463, 2116, -1025, 392, -118, 26, -3, 0, 0, 0];
        assert_eq!(a, expected_a);
    }
}