openapi: 3.0.3
info:
  title: Users-Core API
  description: User management and authentication service for RVoIP
  version: 0.1.26
  contact:
    name: RVoIP Team
    url: https://github.com/rvoip/users-core
  license:
    name: MIT

servers:
  - url: http://localhost:8081
    description: Development server
  - url: https://users.rvoip.local
    description: Production server

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token obtained from /auth/login
    apiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
      description: API key for service accounts

  schemas:
    Error:
      type: object
      required:
        - error
      properties:
        error:
          type: object
          required:
            - code
            - message
          properties:
            code:
              type: string
              example: INVALID_CREDENTIALS
            message:
              type: string
              example: Invalid username or password
            details:
              type: object
              additionalProperties: true

    LoginRequest:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          example: alice@example.com
        password:
          type: string
          format: password
          example: SecurePassword123

    LoginResponse:
      type: object
      required:
        - access_token
        - refresh_token
        - token_type
        - expires_in
      properties:
        access_token:
          type: string
          description: JWT access token
        refresh_token:
          type: string
          description: JWT refresh token
        token_type:
          type: string
          example: Bearer
        expires_in:
          type: integer
          description: Token expiration in seconds
          example: 900

    RefreshRequest:
      type: object
      required:
        - refresh_token
      properties:
        refresh_token:
          type: string

    CreateUserRequest:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 50
          example: alice@example.com
        password:
          type: string
          format: password
          minLength: 8
        email:
          type: string
          format: email
        display_name:
          type: string
        roles:
          type: array
          items:
            type: string
          example: ["user", "sip"]

    UpdateUserRequest:
      type: object
      properties:
        email:
          type: string
          format: email
        display_name:
          type: string
        roles:
          type: array
          items:
            type: string
        active:
          type: boolean

    User:
      type: object
      required:
        - id
        - username
        - roles
        - active
        - created_at
        - updated_at
      properties:
        id:
          type: string
          format: uuid
        username:
          type: string
        email:
          type: string
          format: email
          nullable: true
        display_name:
          type: string
          nullable: true
        roles:
          type: array
          items:
            type: string
        active:
          type: boolean
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        last_login:
          type: string
          format: date-time
          nullable: true

    ChangePasswordRequest:
      type: object
      required:
        - old_password
        - new_password
      properties:
        old_password:
          type: string
          format: password
        new_password:
          type: string
          format: password
          minLength: 8

    UpdateRolesRequest:
      type: object
      required:
        - roles
      properties:
        roles:
          type: array
          items:
            type: string
          example: ["user", "admin", "sip"]
          description: Array of role names to assign to the user

    CreateApiKeyRequest:
      type: object
      required:
        - user_id
        - name
        - permissions
      properties:
        user_id:
          type: string
          format: uuid
        name:
          type: string
        permissions:
          type: array
          items:
            type: string
        expires_at:
          type: string
          format: date-time
          nullable: true

    ApiKey:
      type: object
      required:
        - id
        - name
        - permissions
        - created_at
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        permissions:
          type: array
          items:
            type: string
        expires_at:
          type: string
          format: date-time
          nullable: true
        created_at:
          type: string
          format: date-time
        last_used:
          type: string
          format: date-time
          nullable: true

    CreateApiKeyResponse:
      type: object
      required:
        - key
        - key_info
      properties:
        key:
          type: string
          description: The actual API key (only shown once)
          example: rvoip_ak_live_32CharacterRandomString
        key_info:
          $ref: '#/components/schemas/ApiKey'

    JwksResponse:
      type: object
      required:
        - keys
      properties:
        keys:
          type: array
          items:
            type: object
            required:
              - kty
              - use
              - kid
              - alg
            properties:
              kty:
                type: string
                example: RSA
              use:
                type: string
                example: sig
              kid:
                type: string
                example: users-core-2024
              alg:
                type: string
                example: RS256
              n:
                type: string
                description: RSA modulus (base64url)
              e:
                type: string
                description: RSA exponent (base64url)
                example: AQAB

paths:
  /auth/login:
    post:
      summary: Login with username and password
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/logout:
    post:
      summary: Logout and revoke tokens
      tags: [Authentication]
      security:
        - bearerAuth: []
      responses:
        '204':
          description: Logout successful
        '401':
          description: Unauthorized

  /auth/refresh:
    post:
      summary: Refresh access token
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshRequest'
      responses:
        '200':
          description: Token refreshed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Invalid refresh token

  /auth/jwks.json:
    get:
      summary: Get public keys for token validation
      tags: [Authentication]
      responses:
        '200':
          description: JWKS response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JwksResponse'

  /users:
    post:
      summary: Create a new user
      tags: [Users]
      security:
        - bearerAuth: []
        - apiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '201':
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid request
        '409':
          description: User already exists

    get:
      summary: List users
      tags: [Users]
      security:
        - bearerAuth: []
        - apiKeyAuth: []
      parameters:
        - name: search
          in: query
          schema:
            type: string
          description: Search in username, email, display_name
        - name: active
          in: query
          schema:
            type: boolean
          description: Filter by active status
        - name: role
          in: query
          schema:
            type: string
          description: Filter by role
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
        - name: offset
          in: query
          schema:
            type: integer
            default: 0
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'

  /users/{id}:
    get:
      summary: Get user details
      tags: [Users]
      security:
        - bearerAuth: []
        - apiKeyAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found

    put:
      summary: Update user
      tags: [Users]
      security:
        - bearerAuth: []
        - apiKeyAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      responses:
        '200':
          description: User updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found

    delete:
      summary: Delete user
      tags: [Users]
      security:
        - bearerAuth: []
        - apiKeyAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: User deleted
        '404':
          description: User not found

  /users/{id}/password:
    post:
      summary: Change user password
      tags: [Users]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePasswordRequest'
      responses:
        '204':
          description: Password changed
        '401':
          description: Invalid old password
        '403':
          description: Cannot change another user's password

  /users/{id}/roles:
    post:
      summary: Update user roles
      description: Update the roles assigned to a user. Only administrators can perform this action.
      tags: [Users]
      security:
        - bearerAuth: []
        - apiKeyAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateRolesRequest'
      responses:
        '204':
          description: Roles updated successfully
        '403':
          description: Only administrators can update roles
        '404':
          description: User not found

  /users/{id}/api-keys:
    post:
      summary: Create API key
      tags: [API Keys]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateApiKeyRequest'
      responses:
        '201':
          description: API key created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateApiKeyResponse'

    get:
      summary: List user's API keys
      tags: [API Keys]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: List of API keys
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiKey'

  /api-keys/{id}:
    delete:
      summary: Revoke API key
      tags: [API Keys]
      security:
        - bearerAuth: []
        - apiKeyAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: API key revoked
        '404':
          description: API key not found

  /health:
    get:
      summary: Health check
      tags: [Operations]
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                type: object
                required:
                  - status
                  - service
                  - timestamp
                properties:
                  status:
                    type: string
                    example: healthy
                  service:
                    type: string
                    example: users-core
                  timestamp:
                    type: string
                    format: date-time

  /metrics:
    get:
      summary: Service metrics
      tags: [Operations]
      security:
        - bearerAuth: []
        - apiKeyAuth: []
      responses:
        '200':
          description: Service metrics
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: object
                    properties:
                      total:
                        type: integer
                      active:
                        type: integer
                  api_keys:
                    type: object
                    properties:
                      total:
                        type: integer
                      active:
                        type: integer
                  authentication:
                    type: object
                    properties:
                      success_rate:
                        type: number
                      tokens_issued:
                        type: integer
                  uptime_seconds:
                    type: integer

tags:
  - name: Authentication
    description: Login, logout, token management
  - name: Users
    description: User management operations
  - name: API Keys
    description: API key management
  - name: Operations
    description: Health checks and metrics
