# Enhanced State Table for RVoIP Session Core
# This is the COMPLETE state machine - no external managers needed
# All call control, conference, and advanced features are defined here

version: "2.0"

metadata:
  description: "Complete SIP state machine with conference and advanced features"
  author: "RVoIP Team"
  date: "2025-01-05"

# Define all states including conference states
states:
  # Basic call states
  - name: "Idle"
    description: "No active call"
  - name: "Initiating"
    description: "Starting outbound call"
  - name: "Ringing"
    description: "Remote party is ringing"
  - name: "EarlyMedia"
    description: "Early media received"
  - name: "Active"
    description: "Call established with media flowing"
  - name: "OnHold"
    description: "Call on hold"
  - name: "Resuming"
    description: "Resuming from hold"
  - name: "Muted"
    description: "Microphone muted (still active)"
    
  # Conference states
  - name: "ConferenceHost"
    description: "Hosting a conference"
  - name: "InConference"
    description: "Participant in a conference"
  - name: "ConferenceOnHold"
    description: "Conference participant on hold"
    
  # Transfer and bridge states
  - name: "Bridged"
    description: "Bridged to another call"
  - name: "Transferring"
    description: "Call being transferred"
  - name: "ConsultationCall"
    description: "In consultation for attended transfer"
    
  # Termination states
  - name: "Terminating"
    description: "Call being terminated"
  - name: "Terminated"
    description: "Call ended"
  - name: "Cancelled"
    description: "Call was cancelled"
  - name: "Failed"
    description: "Call failed"
    
  # Registration states
  - name: "Registering"
    description: "SIP registration in progress"
  - name: "Registered"
    description: "Successfully registered with SIP server"
  - name: "Unregistering"
    description: "Unregistration in progress"
    
  # Subscription/Presence states
  - name: "Subscribing"
    description: "Subscription request in progress"
  - name: "Subscribed"
    description: "Active subscription"
  - name: "Publishing"
    description: "Publishing presence information"
    
  # Gateway/B2BUA states
  - name: "BridgeInitiating"
    description: "Setting up B2BUA bridge"
  - name: "BridgeActive"
    description: "B2BUA bridge established with both legs active"

# Define conditions
conditions:
  - name: "DialogEstablished"
    description: "SIP dialog is established"
    default: false
  - name: "MediaSessionReady"
    description: "Media session is ready"
    default: false
  - name: "SDPNegotiated"
    description: "SDP has been negotiated"
    default: false
  - name: "HasRemoteSDP"
    description: "Remote SDP is available"
    default: false
  - name: "HasMediaSession"
    description: "Media session exists"
    default: false
  - name: "HasMixer"
    description: "Audio mixer is available"
    default: false
  - name: "IsConferenceHost"
    description: "Session is hosting a conference"
    default: false
  - name: "AllConditionsMet"
    description: "All required conditions are met"
    default: false
  - name: "IsRegistered"
    description: "Client is registered with SIP server"
    default: false
  - name: "HasActiveSubscription"
    description: "Has active presence subscription"
    default: false

# Define all state transitions
transitions:
  # ================== Basic Call Flow ==================
  
  # Make outgoing call
  - role: "UAC"
    state: "Idle"
    event:
      type: "MakeCall"
    actions:
      - type: "CreateDialog"
      - type: "CreateMediaSession"
      - type: "GenerateLocalSDP"
      - type: "SendINVITE"
    next_state: "Initiating"
    condition_updates:
      HasMediaSession: true
    publish_events:
      - type: "CallInitiated"

  # Receive incoming call
  - role: "UAS"
    state: "Idle"
    event:
      type: "IncomingCall"
    actions:
      - type: "CreateMediaSession"
      - type: "StoreRemoteSDP"
      - type: "SendSIPResponse"
        code: 180
        reason: "Ringing"
    next_state: "Ringing"
    condition_updates:
      HasRemoteSDP: true
      HasMediaSession: true
    publish_events:
      - type: "IncomingCallReceived"

  # Accept incoming call
  - role: "UAS"
    state: "Ringing"
    event:
      type: "AcceptCall"
    guards:
      - type: "HasMediaSession"
    actions:
      - type: "NegotiateSDPAsUAS"
      - type: "GenerateLocalSDP"
      - type: "Send200OK"
    next_state: "Active"
    condition_updates:
      SDPNegotiated: true
    publish_events:
      - type: "CallAccepted"

  # Answer received (UAC)
  - role: "UAC"
    state: "Ringing"
    event:
      type: "Dialog200OK"
    guards:
      - type: "HasRemoteSDP"
    actions:
      - type: "StoreRemoteSDP"
      - type: "NegotiateSDPAsUAC"
      - type: "SendACK"
      - type: "StartMediaFlow"
    next_state: "Active"
    condition_updates:
      DialogEstablished: true
      SDPNegotiated: true
      MediaSessionReady: true
    publish_events:
      - type: "CallEstablished"

  # ================== Conference Features ==================
  
  # Create a conference (from active call)
  - role: "Both"
    state: "Active"
    event:
      type: "CreateConference"
    actions:
      - type: "CreateAudioMixer"
      - type: "RedirectToMixer"
        participant: "self"
    next_state: "ConferenceHost"
    condition_updates:
      HasMixer: true
      IsConferenceHost: true
    publish_events:
      - type: "ConferenceCreated"

  # Add participant to conference (as host)
  - role: "Both"
    state: "ConferenceHost"
    event:
      type: "AddParticipant"
    guards:
      - type: "HasMixer"
    actions:
      - type: "CreateBridge"
      - type: "RedirectToMixer"
        participant: "target"
    publish_events:
      - type: "ParticipantAdded"

  # Join existing conference
  - role: "Both"
    state: "Active"
    event:
      type: "JoinConference"
    actions:
      - type: "ConnectToMixer"
    next_state: "InConference"
    publish_events:
      - type: "JoinedConference"

  # Leave conference
  - role: "Both"
    state: "InConference"
    event:
      type: "LeaveConference"
    actions:
      - type: "DisconnectFromMixer"
      - type: "RestoreDirectMedia"
    next_state: "Active"
    publish_events:
      - type: "LeftConference"

  # Mute in conference
  - role: "Both"
    state: "InConference"
    event:
      type: "MuteInConference"
    actions:
      - type: "MuteToMixer"
    publish_events:
      - type: "ParticipantMuted"

  # ================== Call Control Features ==================
  
  # Hold (from any active state)
  - role: "Both"
    state: "Active"
    event:
      type: "HoldCall"
    actions:
      - type: "UpdateMediaDirection"
        direction: "sendonly"
      - type: "SendReINVITE"
    next_state: "OnHold"
    publish_events:
      - type: "CallOnHold"

  - role: "Both"
    state: "ConferenceHost"
    event:
      type: "HoldCall"
    actions:
      - type: "MuteToMixer"
      - type: "SendReINVITE"
    next_state: "ConferenceOnHold"
    publish_events:
      - type: "CallOnHold"

  # Resume
  - role: "Both"
    state: "OnHold"
    event:
      type: "ResumeCall"
    actions:
      - type: "UpdateMediaDirection"
        direction: "sendrecv"
      - type: "SendReINVITE"
    next_state: "Resuming"

  - role: "Both"
    state: "Resuming"
    event:
      type: "Dialog200OK"
    actions:
      - type: "SendACK"
      - type: "RestoreMediaFlow"
    next_state: "Active"
    publish_events:
      - type: "CallResumed"

  # Mute/Unmute (stays in same state)
  - role: "Both"
    state: "Active"
    event:
      type: "MuteCall"
    actions:
      - type: "MuteLocalAudio"
    next_state: "Muted"
    publish_events:
      - type: "CallMuted"

  - role: "Both"
    state: "Muted"
    event:
      type: "UnmuteCall"
    actions:
      - type: "UnmuteLocalAudio"
    next_state: "Active"
    publish_events:
      - type: "CallUnmuted"

  # ================== Transfer Features ==================
  
  # Blind transfer
  - role: "Both"
    state: "Active"
    event:
      type: "BlindTransfer"
    actions:
      - type: "SendREFER"
    next_state: "Transferring"
    publish_events:
      - type: "TransferInitiated"

  # Attended transfer - start consultation
  - role: "Both"
    state: "Active"
    event:
      type: "StartAttendedTransfer"
    actions:
      - type: "HoldCurrentCall"
      - type: "CreateConsultationCall"
    next_state: "ConsultationCall"
    publish_events:
      - type: "ConsultationStarted"

  # Complete attended transfer
  - role: "Both"
    state: "ConsultationCall"
    event:
      type: "CompleteAttendedTransfer"
    actions:
      - type: "SendREFERWithReplaces"
      - type: "TerminateConsultationCall"
    next_state: "Transferring"
    publish_events:
      - type: "TransferCompleted"

  # Transfer result
  - role: "Both"
    state: "Transferring"
    event:
      type: "TransferSuccess"
    actions:
      - type: "SendBYE"
      - type: "StartMediaCleanup"
    next_state: "Terminating"
    publish_events:
      - type: "CallTransferred"

  # ================== DTMF ==================
  
  # Send DTMF (stays in same state)
  - role: "Both"
    state: "Active"
    event:
      type: "SendDTMF"
    actions:
      - type: "SendDTMFTone"
    publish_events:
      - type: "DTMFSent"

  - role: "Both"
    state: "InConference"
    event:
      type: "SendDTMF"
    actions:
      - type: "SendDTMFTone"
    publish_events:
      - type: "DTMFSent"

  # ================== Recording ==================
  
  # Start recording (stays in same state)
  - role: "Both"
    state: "Active"
    event:
      type: "StartRecording"
    actions:
      - type: "StartRecordingMedia"
    publish_events:
      - type: "RecordingStarted"

  - role: "Both"
    state: "ConferenceHost"
    event:
      type: "StartRecording"
    actions:
      - type: "StartRecordingMixer"
    publish_events:
      - type: "ConferenceRecordingStarted"

  # Stop recording
  - role: "Both"
    state: "Active"
    event:
      type: "StopRecording"
    actions:
      - type: "StopRecordingMedia"
    publish_events:
      - type: "RecordingStopped"

  # ================== Termination ==================
  
  # Hangup from any active state
  - role: "Both"
    state: "Active"
    event:
      type: "HangupCall"
    actions:
      - type: "SendBYE"
      - type: "StopMediaFlow"
    next_state: "Terminating"
    publish_events:
      - type: "CallTerminating"

  - role: "Both"
    state: "ConferenceHost"
    event:
      type: "HangupCall"
    actions:
      - type: "DestroyMixer"
      - type: "SendBYE"
    next_state: "Terminating"
    publish_events:
      - type: "ConferenceTerminating"

  - role: "Both"
    state: "InConference"
    event:
      type: "HangupCall"
    actions:
      - type: "DisconnectFromMixer"
      - type: "SendBYE"
    next_state: "Terminating"
    publish_events:
      - type: "LeavingConference"

  # Remote hangup
  - role: "Both"
    state: "Active"
    event:
      type: "DialogBYE"
    actions:
      - type: "SendSIPResponse"
        code: 200
        reason: "OK"
      - type: "StopMediaFlow"
    next_state: "Terminating"
    publish_events:
      - type: "RemoteHangup"

  # Cleanup complete
  - role: "Both"
    state: "Terminating"
    event:
      type: "InternalCleanupComplete"
    actions:
      - type: "ReleaseAllResources"
    next_state: "Terminated"
    publish_events:
      - type: "CallTerminated"

  # ================== Error Handling ==================
  
  # Handle errors from any state
  - role: "Both"
    state: "Any"
    event:
      type: "DialogError"
    actions:
      - type: "StartEmergencyCleanup"
    next_state: "Failed"
    publish_events:
      - type: "CallFailed"

  - role: "Both"
    state: "Any"
    event:
      type: "MediaError"
    actions:
      - type: "AttemptMediaRecovery"
    publish_events:
      - type: "MediaErrorDetected"

  # Timeout handling
  - role: "Both"
    state: "Initiating"
    event:
      type: "DialogTimeout"
    actions:
      - type: "SendCANCEL"
      - type: "CleanupResources"
    next_state: "Failed"
    publish_events:
      - type: "CallTimeout"
      
  # ================== Registration Support ==================
  
  # Start registration
  - role: "Both"
    state: "Idle"
    event:
      type: "Register"
    actions:
      - type: "SendREGISTER"
    next_state: "Registering"
    publish_events:
      - type: "RegistrationStarted"
      
  # Registration successful
  - role: "Both"
    state: "Registering"
    event:
      type: "Dialog200OK"
    actions:
      - type: "StoreRegistration"
      - type: "StartRegistrationRefreshTimer"
    next_state: "Registered"
    condition_updates:
      IsRegistered: true
    publish_events:
      - type: "RegistrationSuccessful"
      
  # Registration failed
  - role: "Both"
    state: "Registering"
    event:
      type: "Dialog4xxFailure"
    actions:
      - type: "HandleRegistrationFailure"
    next_state: "Idle"
    publish_events:
      - type: "RegistrationFailed"
      
  # Refresh registration
  - role: "Both"
    state: "Registered"
    event:
      type: "RefreshRegistration"
    actions:
      - type: "SendREGISTER"
    next_state: "Registering"
    publish_events:
      - type: "RegistrationRefreshing"
      
  # Unregister
  - role: "Both"
    state: "Registered"
    event:
      type: "Unregister"
    actions:
      - type: "SendUnregister"
    next_state: "Unregistering"
    publish_events:
      - type: "UnregistrationStarted"
      
  # Unregistration complete
  - role: "Both"
    state: "Unregistering"
    event:
      type: "Dialog200OK"
    actions:
      - type: "ClearRegistration"
    next_state: "Idle"
    condition_updates:
      IsRegistered: false
    publish_events:
      - type: "UnregistrationComplete"
      
  # Make call from registered state
  - role: "UAC"
    state: "Registered"
    event:
      type: "MakeCall"
    actions:
      - type: "CreateDialog"
      - type: "CreateMediaSession"
      - type: "GenerateLocalSDP"
      - type: "SendINVITE"
    next_state: "Initiating"
    condition_updates:
      HasMediaSession: true
    publish_events:
      - type: "CallInitiated"
      
  # ================== OPTIONS Support ==================
  
  # Handle incoming OPTIONS (keepalive/capability)
  - role: "Both"
    state: "Any"
    event:
      type: "DialogOPTIONS"
    actions:
      - type: "GenerateCapabilities"
      - type: "SendSIPResponse"
        code: 200
        reason: "OK"
    publish_events:
      - type: "OptionsReceived"
      
  # Send OPTIONS (for keepalive)
  - role: "Both"
    state: "Registered"
    event:
      type: "SendOptions"
    actions:
      - type: "SendOPTIONS"
    publish_events:
      - type: "OptionsSent"
      
  # ================== UPDATE Support ==================
  
  # Handle incoming UPDATE (mid-dialog modification)
  - role: "Both"
    state: "Active"
    event:
      type: "DialogUPDATE"
    actions:
      - type: "ProcessUpdate"
      - type: "ModifyMediaSession"
      - type: "Send200OK"
    publish_events:
      - type: "SessionUpdated"
      
  # Send UPDATE
  - role: "Both"
    state: "Active"
    event:
      type: "SendUpdate"
    actions:
      - type: "SendUPDATE"
    publish_events:
      - type: "UpdateSent"
      
  # ================== INFO Support ==================
  
  # Handle incoming INFO
  - role: "Both"
    state: "Active"
    event:
      type: "DialogINFO"
    actions:
      - type: "ProcessInfo"
      - type: "Send200OK"
    publish_events:
      - type: "InfoReceived"
      
  # Send INFO
  - role: "Both"
    state: "Active"
    event:
      type: "SendInfo"
    actions:
      - type: "SendINFO"
    publish_events:
      - type: "InfoSent"
      
  # ================== SUBSCRIBE/NOTIFY Support ==================
  
  # Start subscription
  - role: "Both"
    state: "Registered"
    event:
      type: "Subscribe"
    actions:
      - type: "SendSUBSCRIBE"
    next_state: "Subscribing"
    publish_events:
      - type: "SubscriptionStarted"
      
  # Subscription accepted
  - role: "Both"
    state: "Subscribing"
    event:
      type: "Dialog200OK"
    actions:
      - type: "StoreSubscription"
    next_state: "Subscribed"
    condition_updates:
      HasActiveSubscription: true
    publish_events:
      - type: "SubscriptionActive"
      
  # Handle NOTIFY
  - role: "Both"
    state: "Subscribed"
    event:
      type: "DialogNOTIFY"
    actions:
      - type: "ProcessNotification"
      - type: "Send200OK"
    publish_events:
      - type: "NotificationReceived"
      
  # Unsubscribe
  - role: "Both"
    state: "Subscribed"
    event:
      type: "Unsubscribe"
    actions:
      - type: "SendUnsubscribe"
    next_state: "Registered"
    condition_updates:
      HasActiveSubscription: false
    publish_events:
      - type: "SubscriptionEnded"
      
  # ================== MESSAGE Support ==================
  
  # Send instant message
  - role: "Both"
    state: "Registered"
    event:
      type: "SendMessage"
    actions:
      - type: "SendMESSAGE"
    publish_events:
      - type: "MessageSent"
      
  # Receive instant message
  - role: "Both"
    state: "Any"
    event:
      type: "DialogMESSAGE"
    actions:
      - type: "ProcessMessage"
      - type: "Send200OK"
    publish_events:
      - type: "MessageReceived"
      
  # ================== PUBLISH Support ==================
  
  # Publish presence
  - role: "Both"
    state: "Registered"
    event:
      type: "PublishPresence"
    actions:
      - type: "SendPUBLISH"
    next_state: "Publishing"
    publish_events:
      - type: "PresencePublishing"
      
  # Publish successful
  - role: "Both"
    state: "Publishing"
    event:
      type: "Dialog200OK"
    actions:
      - type: "StoreETag"
    next_state: "Registered"
    publish_events:
      - type: "PresencePublished"
      
  # ================== Gateway/B2BUA Specific ==================
  
  # Start B2BUA bridge
  - role: "Both"
    state: "Active"
    event:
      type: "InitiateBridge"
    actions:
      - type: "CreateOutboundLeg"
      - type: "SetupMediaBridge"
    next_state: "BridgeInitiating"
    publish_events:
      - type: "BridgeInitiated"
      
  # Bridge established
  - role: "Both"
    state: "BridgeInitiating"
    event:
      type: "BridgeConnected"
    actions:
      - type: "ConnectMediaStreams"
      - type: "StartBridgeMonitoring"
    next_state: "BridgeActive"
    publish_events:
      - type: "BridgeEstablished"
      
  # Handle transcoding
  - role: "Both"
    state: "BridgeActive"
    event:
      type: "TranscodingRequired"
    actions:
      - type: "SetupTranscoder"
      - type: "UpdateMediaPath"
    publish_events:
      - type: "TranscodingEnabled"
      
  # Bridge failure recovery
  - role: "Both"
    state: "BridgeActive"
    event:
      type: "BridgeFailed"
    actions:
      - type: "AttemptBridgeRecovery"
      - type: "NotifyEndpoints"
    next_state: "BridgeInitiating"
    publish_events:
      - type: "BridgeRecovering"
