# SIP Gateway State Table
# Optimized for B2BUA operations, protocol conversion, and gateway routing
# Includes transcoding, load balancing, and failover support

version: "1.0"

metadata:
  description: "State table optimized for SIP gateway and B2BUA applications"
  author: "RVoIP Team"
  date: "2025-01-07"

# Gateway-specific states
states:
  # Core gateway states
  - name: "Idle"
    description: "No active sessions"
  - name: "Authenticating"
    description: "Authenticating incoming request"
  - name: "Routing"
    description: "Determining route for call"
  - name: "ForkingCall"
    description: "Parallel forking to multiple destinations"
    
  # B2BUA leg states
  - name: "InboundLegActive"
    description: "Inbound leg established"
  - name: "CreatingOutboundLeg"
    description: "Creating outbound leg"
  - name: "OutboundLegRinging"
    description: "Outbound leg ringing"
  - name: "BothLegsActive"
    description: "Both legs connected and bridged"
  - name: "TranscodingActive"
    description: "Media transcoding in progress"
    
  # Protocol conversion states
  - name: "ConvertingProtocol"
    description: "Converting between SIP variants"
  - name: "NormalizingHeaders"
    description: "Normalizing SIP headers"
    
  # Load balancing states
  - name: "SelectingBackend"
    description: "Choosing backend server"
  - name: "Failover"
    description: "Failing over to backup"
  - name: "Retrying"
    description: "Retrying failed request"
    
  # Media states
  - name: "MediaProxying"
    description: "Proxying media streams"
  - name: "MediaAnchoring"
    description: "Anchoring media through gateway"
  - name: "MediaBypass"
    description: "Media flowing directly between endpoints"
    
  # Registration proxy states
  - name: "ProxyingRegistration"
    description: "Proxying REGISTER request"
  - name: "CachingRegistration"
    description: "Caching registration locally"
    
  # Termination states
  - name: "TearingDown"
    description: "Tearing down session"
  - name: "Terminated"
    description: "Session terminated"
  - name: "Failed"
    description: "Operation failed"

# Gateway conditions
conditions:
  - name: "InboundAuthenticated"
    description: "Inbound request is authenticated"
    default: false
  - name: "RouteSelected"
    description: "Outbound route has been selected"
    default: false
  - name: "InboundLegEstablished"
    description: "Inbound leg is established"
    default: false
  - name: "OutboundLegEstablished"
    description: "Outbound leg is established"
    default: false
  - name: "MediaAnchored"
    description: "Media is anchored through gateway"
    default: false
  - name: "TranscodingRequired"
    description: "Transcoding is needed"
    default: false
  - name: "FailoverAvailable"
    description: "Backup route available"
    default: false

# Gateway transitions
transitions:
  # ================== Inbound Call Handling ==================
  
  - role: "B2BUA"
    state: "Idle"
    event:
      type: "IncomingCall"
    actions:
      - type: "ValidateRequest"
      - type: "ExtractCredentials"
      - type: "CheckRateLimits"
    next_state: "Authenticating"
    publish_events:
      - type: "InboundCallReceived"
      
  - role: "B2BUA"
    state: "Authenticating"
    event:
      type: "AuthenticationSuccess"
    actions:
      - type: "StoreInboundLeg"
      - type: "Send100Trying"
      - type: "NormalizeHeaders"
    next_state: "Routing"
    condition_updates:
      InboundAuthenticated: true
    publish_events:
      - type: "InboundAuthenticated"
      
  - role: "B2BUA"
    state: "Authenticating"
    event:
      type: "AuthenticationFailure"
    actions:
      - type: "SendSIPResponse"
        code: 403
        reason: "Forbidden"
      - type: "LogSecurityEvent"
    next_state: "Failed"
    publish_events:
      - type: "AuthenticationFailed"
      
  # ================== Routing Logic ==================
  
  - role: "B2BUA"
    state: "Routing"
    event:
      type: "RouteFound"
    actions:
      - type: "SelectPrimaryRoute"
      - type: "PrepareOutboundHeaders"
      - type: "DetermineMediaHandling"
    next_state: "CreatingOutboundLeg"
    condition_updates:
      RouteSelected: true
    publish_events:
      - type: "RouteSelected"
      
  - role: "B2BUA"
    state: "Routing"
    event:
      type: "MultipleRoutesFound"
    actions:
      - type: "PrepareForkingList"
      - type: "SetForkingTimer"
    next_state: "ForkingCall"
    publish_events:
      - type: "ForkingInitiated"
      
  - role: "B2BUA"
    state: "Routing"
    event:
      type: "NoRouteFound"
    actions:
      - type: "SendSIPResponse"
        code: 404
        reason: "Not Found"
      - type: "CleanupInboundLeg"
    next_state: "Failed"
    publish_events:
      - type: "NoRouteAvailable"
      
  # ================== B2BUA Leg Management ==================
  
  - role: "B2BUA"
    state: "CreatingOutboundLeg"
    event:
      type: "CreateOutboundLeg"
    actions:
      - type: "GenerateCallId"
      - type: "CreateOutboundDialog"
      - type: "ApplyHeaderManipulation"
      - type: "SendOutboundINVITE"
    next_state: "OutboundLegRinging"
    publish_events:
      - type: "OutboundLegCreated"
      
  - role: "B2BUA"
    state: "OutboundLegRinging"
    event:
      type: "Outbound180Ringing"
    actions:
      - type: "ForwardRingingToInbound"
      - type: "StartRingingTimer"
    publish_events:
      - type: "OutboundRinging"
      
  - role: "B2BUA"
    state: "OutboundLegRinging"
    event:
      type: "Outbound200OK"
    actions:
      - type: "StoreOutboundSDP"
      - type: "Send200OKToInbound"
      - type: "CreateMediaBridge"
    next_state: "InboundLegActive"
    condition_updates:
      OutboundLegEstablished: true
    publish_events:
      - type: "OutboundAnswered"
      
  - role: "B2BUA"
    state: "InboundLegActive"
    event:
      type: "InboundACK"
    actions:
      - type: "SendACKToOutbound"
      - type: "StartMediaFlow"
      - type: "StartCallMonitoring"
    next_state: "BothLegsActive"
    condition_updates:
      InboundLegEstablished: true
    publish_events:
      - type: "CallBridged"
      
  # ================== Media Handling ==================
  
  - role: "B2BUA"
    state: "BothLegsActive"
    event:
      type: "MediaNegotiationRequired"
    actions:
      - type: "AnalyzeCodecs"
      - type: "DetermineTranscodingNeeds"
    next_state: "ConvertingProtocol"
    publish_events:
      - type: "MediaNegotiationStarted"
      
  - role: "B2BUA"
    state: "ConvertingProtocol"
    event:
      type: "TranscodingRequired"
    actions:
      - type: "AllocateTranscoder"
      - type: "SetupTranscodingPath"
      - type: "UpdateSDPBothLegs"
    next_state: "TranscodingActive"
    condition_updates:
      TranscodingRequired: true
      MediaAnchored: true
    publish_events:
      - type: "TranscodingEnabled"
      
  - role: "B2BUA"
    state: "BothLegsActive"
    event:
      type: "EnableMediaBypass"
    actions:
      - type: "NegotiateDirectMedia"
      - type: "UpdateSDPForBypass"
      - type: "ReleaseMediaResources"
    next_state: "MediaBypass"
    condition_updates:
      MediaAnchored: false
    publish_events:
      - type: "MediaBypassed"
      
  - role: "B2BUA"
    state: "MediaBypass"
    event:
      type: "ReanchorMedia"
    actions:
      - type: "ForceMediaThruGateway"
      - type: "AllocateMediaPorts"
      - type: "SendReINVITEBothLegs"
    next_state: "MediaAnchoring"
    publish_events:
      - type: "MediaReanchoring"
      
  - role: "B2BUA"
    state: "MediaAnchoring"
    event:
      type: "MediaAnchored"
    next_state: "BothLegsActive"
    condition_updates:
      MediaAnchored: true
    publish_events:
      - type: "MediaAnchored"
      
  # ================== Protocol Conversion ==================
  
  - role: "B2BUA"
    state: "ConvertingProtocol"
    event:
      type: "ConvertSIPVariant"
    actions:
      - type: "TranslateHeaders"
      - type: "AdaptSDP"
      - type: "HandleProtocolDifferences"
    next_state: "NormalizingHeaders"
    publish_events:
      - type: "ProtocolConverted"
      
  - role: "B2BUA"
    state: "NormalizingHeaders"
    event:
      type: "HeadersNormalized"
    actions:
      - type: "ValidateConversion"
      - type: "ContinueCallFlow"
    next_state: "BothLegsActive"
    publish_events:
      - type: "NormalizationComplete"
      
  # ================== Load Balancing & Failover ==================
  
  - role: "B2BUA"
    state: "SelectingBackend"
    event:
      type: "BackendSelected"
    actions:
      - type: "MarkBackendInUse"
      - type: "RouteToBackend"
      - type: "StartHealthCheck"
    next_state: "CreatingOutboundLeg"
    publish_events:
      - type: "BackendSelected"
      
  - role: "B2BUA"
    state: "OutboundLegRinging"
    event:
      type: "OutboundTimeout"
    actions:
      - type: "CancelOutboundLeg"
      - type: "CheckFailoverRoutes"
    next_state: "Failover"
    condition_updates:
      FailoverAvailable: true
    publish_events:
      - type: "AttemptingFailover"
      
  - role: "B2BUA"
    state: "Failover"
    event:
      type: "FailoverRouteSelected"
    actions:
      - type: "CreateNewOutboundLeg"
      - type: "ApplyFailoverPolicy"
      - type: "SendToBackupRoute"
    next_state: "OutboundLegRinging"
    publish_events:
      - type: "FailoverInitiated"
      
  - role: "B2BUA"
    state: "Failover"
    event:
      type: "NoFailoverAvailable"
    actions:
      - type: "SendSIPResponse"
        code: 503
        reason: "Service Unavailable"
      - type: "CleanupBothLegs"
    next_state: "Failed"
    publish_events:
      - type: "AllRoutesExhausted"
      
  # ================== Registration Proxy ==================
  
  - role: "B2BUA"
    state: "Idle"
    event:
      type: "IncomingRegister"
    actions:
      - type: "ValidateRegistration"
      - type: "CheckRegistrationCache"
    next_state: "ProxyingRegistration"
    publish_events:
      - type: "RegistrationReceived"
      
  - role: "B2BUA"
    state: "ProxyingRegistration"
    event:
      type: "ForwardRegistration"
    actions:
      - type: "SelectRegistrar"
      - type: "ForwardREGISTER"
      - type: "StartRegistrationTimer"
    next_state: "CachingRegistration"
    publish_events:
      - type: "RegistrationForwarded"
      
  - role: "B2BUA"
    state: "CachingRegistration"
    event:
      type: "Registration200OK"
    actions:
      - type: "CacheRegistration"
      - type: "UpdateLocationService"
      - type: "Forward200OK"
    next_state: "Idle"
    publish_events:
      - type: "RegistrationCached"
      
  # ================== Forking Support ==================
  
  - role: "B2BUA"
    state: "ForkingCall"
    event:
      type: "Fork200OK"
    actions:
      - type: "CancelOtherForks"
      - type: "SelectWinningFork"
      - type: "Forward200OK"
    next_state: "InboundLegActive"
    publish_events:
      - type: "ForkAnswered"
      
  - role: "B2BUA"
    state: "ForkingCall"
    event:
      type: "AllForksFailed"
    actions:
      - type: "CollectFailureResponses"
      - type: "SendBestFailureResponse"
    next_state: "Failed"
    publish_events:
      - type: "AllForksFailed"
      
  # ================== Call Termination ==================
  
  - role: "B2BUA"
    state: "BothLegsActive"
    event:
      type: "InboundBYE"
    actions:
      - type: "Send200OKToInbound"
      - type: "SendBYEToOutbound"
      - type: "StartTeardown"
    next_state: "TearingDown"
    publish_events:
      - type: "InboundDisconnected"
      
  - role: "B2BUA"
    state: "BothLegsActive"
    event:
      type: "OutboundBYE"
    actions:
      - type: "Send200OKToOutbound"
      - type: "SendBYEToInbound"
      - type: "StartTeardown"
    next_state: "TearingDown"
    publish_events:
      - type: "OutboundDisconnected"
      
  - role: "B2BUA"
    state: "TearingDown"
    event:
      type: "TeardownComplete"
    actions:
      - type: "ReleaseAllResources"
      - type: "GenerateCDR"
      - type: "UpdateStatistics"
    next_state: "Terminated"
    condition_updates:
      InboundLegEstablished: false
      OutboundLegEstablished: false
      MediaAnchored: false
      TranscodingRequired: false
    publish_events:
      - type: "SessionTerminated"
      
  # ================== Error Handling ==================
  
  - role: "B2BUA"
    state: "Any"
    event:
      type: "CriticalError"
    actions:
      - type: "EmergencyTeardown"
      - type: "NotifyMonitoring"
      - type: "LogError"
    next_state: "Failed"
    publish_events:
      - type: "CriticalErrorOccurred"
      
  - role: "B2BUA"
    state: "TranscodingActive"
    event:
      type: "TranscoderFailure"
    actions:
      - type: "AttemptTranscoderRecovery"
      - type: "FallbackToPassthrough"
    next_state: "BothLegsActive"
    condition_updates:
      TranscodingRequired: false
    publish_events:
      - type: "TranscoderRecovered"
      
  - role: "B2BUA"
    state: "Failed"
    event:
      type: "Reset"
    actions:
      - type: "CleanupAllResources"
      - type: "ResetState"
    next_state: "Idle"
    condition_updates:
      InboundAuthenticated: false
      RouteSelected: false
      InboundLegEstablished: false
      OutboundLegEstablished: false
      MediaAnchored: false
      TranscodingRequired: false
      FailoverAvailable: false
