//! Example demonstrating media preferences configuration with client-core
//! 
//! This shows how media preferences configured in client-core are automatically
//! passed to session-core for use in SDP generation.

use rvoip_client_core::{
    ClientBuilder, ClientResult, 
    ClientEventHandler, ClientEvent,
    events::{CallEventInfo, MediaEventInfo},
};
use std::sync::Arc;
use tokio::sync::RwLock;
use tracing::info;

/// Event handler that logs media-related events
#[derive(Debug, Clone)]
struct MediaLoggingHandler {
    received_calls: Arc<RwLock<Vec<String>>>,
}

impl MediaLoggingHandler {
    fn new() -> Self {
        Self {
            received_calls: Arc::new(RwLock::new(Vec::new())),
        }
    }
}

#[async_trait::async_trait]
impl ClientEventHandler for MediaLoggingHandler {
    async fn on_event(&self, event: ClientEvent) {
        match &event {
            ClientEvent::CallStateChanged(info) => {
                info!("Call {} state: {:?}", info.call_id, info.state);
                if let Some(sdp) = &info.local_sdp {
                    info!("Local SDP includes codecs from our preferences:");
                    for line in sdp.lines() {
                        if line.starts_with("m=audio") || line.starts_with("a=rtpmap") {
                            info!("  {}", line);
                        }
                    }
                }
            }
            ClientEvent::MediaEvent(info) => {
                info!("Media event: {:?}", info.event_type);
            }
            _ => {}
        }
    }
    
    async fn on_call_event(&self, _event: CallEventInfo) {}
    async fn on_media_event(&self, event: MediaEventInfo) {
        info!("Media event for call {}: {:?}", event.call_id, event.event_type);
    }
}

#[tokio::main]
async fn main() -> ClientResult<()> {
    // Initialize logging
    tracing_subscriber::fmt::init();
    
    info!("=== Media Preferences Demo ===");
    info!("This demo shows how client-core media preferences are passed to session-core");
    
    // Method 1: Configure with detailed media preferences
    let client = ClientBuilder::new()
        .local_address("127.0.0.1:5080".parse()?)
        .user_agent("MediaPreferencesDemo/1.0")
        .with_media(|m| m
            // Prefer high-quality codecs
            .codecs(vec!["opus", "G722", "PCMU", "PCMA"])
            
            // Enable audio processing
            .echo_cancellation(true)
            .noise_suppression(true)
            .auto_gain_control(true)
            
            // Enable DTMF
            .dtmf(true)
            
            // Set bandwidth and timing
            .max_bandwidth_kbps(256)
            .ptime(20)
            
            // Add custom SDP attributes
            .custom_attribute("a=tool", "rvoip-client-demo")
            .custom_attribute("a=x-preferred-codec", "opus")
        )
        .build()
        .await?;
    
    // Set event handler
    let handler = Arc::new(MediaLoggingHandler::new());
    client.set_event_handler(handler.clone()).await;
    
    // Start the client
    client.start().await?;
    info!("Client started with custom media preferences");
    
    // Display configured preferences
    info!("\nConfigured Media Preferences:");
    info!("  Preferred codecs: {:?}", client.media_config.preferred_codecs);
    info!("  Echo cancellation: {}", client.media_config.echo_cancellation);
    info!("  Noise suppression: {}", client.media_config.noise_suppression);
    info!("  Auto gain control: {}", client.media_config.auto_gain_control);
    info!("  DTMF enabled: {}", client.media_config.dtmf_enabled);
    info!("  Max bandwidth: {:?} kbps", client.media_config.max_bandwidth_kbps);
    info!("  Preferred ptime: {:?} ms", client.media_config.preferred_ptime);
    
    // Get media capabilities
    let capabilities = client.get_media_capabilities().await;
    info!("\nMedia Capabilities:");
    info!("  Supported codecs: {}", capabilities.supported_codecs.len());
    for codec in &capabilities.supported_codecs {
        info!("    - {} ({}Hz, quality: {}â˜…)", 
            codec.name, codec.clock_rate, codec.quality_rating);
    }
    
    info!("\n=== Demo: Making a call with media preferences ===");
    info!("When you make a call, the SDP offer will include:");
    info!("  - Codecs in order: opus, G722, PCMU, PCMA");
    info!("  - Ptime: 20ms");
    info!("  - Custom attributes");
    
    // Example of what the generated SDP would look like:
    let example_sdp = r#"
Expected SDP (generated by session-core with our preferences):
v=0
o=- 0 0 IN IP4 127.0.0.1
s=-
c=IN IP4 127.0.0.1
t=0 0
m=audio 10000 RTP/AVP 111 9 0 8 101
a=rtpmap:111 opus/48000/2
a=rtpmap:9 G722/8000
a=rtpmap:0 PCMU/8000
a=rtpmap:8 PCMA/8000
a=rtpmap:101 telephone-event/8000
a=fmtp:101 0-15
a=ptime:20
a=tool:rvoip-client-demo
a=x-preferred-codec:opus
b=AS:256"#;
    
    info!("{}", example_sdp);
    
    // Alternative method: Use a preset
    info!("\n=== Alternative: Using Media Presets ===");
    
    let _voice_optimized_client = ClientBuilder::new()
        .local_address("127.0.0.1:5081".parse()?)
        .media_preset(rvoip_client_core::client::config::MediaPreset::VoiceOptimized)
        .build()
        .await?;
    
    info!("Voice-optimized preset automatically configures:");
    info!("  - Standard voice codecs (PCMU, PCMA, G722)");
    info!("  - Echo cancellation enabled");
    info!("  - Noise suppression enabled");
    info!("  - 20ms packetization");
    
    let _high_quality_client = ClientBuilder::new()
        .local_address("127.0.0.1:5082".parse()?)
        .media_preset(rvoip_client_core::client::config::MediaPreset::HighQuality)
        .build()
        .await?;
    
    info!("\nHigh-quality preset automatically configures:");
    info!("  - Premium codecs (opus, G722)");
    info!("  - All audio processing enabled");
    info!("  - Higher bandwidth allocation");
    
    info!("\n=== Benefits of this integration ===");
    info!("1. Media preferences are configured once in client-core");
    info!("2. Session-core automatically uses them for all SDP generation");
    info!("3. No manual SDP manipulation needed");
    info!("4. Consistent codec negotiation across all calls");
    
    // Keep running for a moment to show we're ready
    info!("\nClient is running. Press Ctrl+C to exit.");
    tokio::time::sleep(std::time::Duration::from_secs(60)).await;
    
    // Clean up
    client.stop().await?;
    info!("Client stopped");
    
    Ok(())
} 