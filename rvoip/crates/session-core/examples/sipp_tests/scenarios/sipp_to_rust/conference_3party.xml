<?xml version="1.0" encoding="ISO-8859-1" ?>
<!DOCTYPE scenario SYSTEM "sipp.dtd">

<!-- 
ðŸŽª 3-Party Conference Test Scenario for SIPp - REAL AUDIO TESTING
================================================================

This scenario simulates multiple SIP clients joining a conference
with actual RTP audio streams to test real conference functionality.

Usage: 
  sipp -sf conference_3party.xml -i 127.0.0.1 -p 5061 127.0.0.1:5064 -rtp_echo

Features:
- Simulates 3 participants joining conference "testroom"
- Each participant establishes RTP audio streams
- Tests actual audio mixing and distribution
- Validates conference server media handling
- Real-time RTP packet exchange
-->

<scenario name="Conference 3-Party Real Audio Test">
  
  <!-- Initial INVITE to join conference -->
  <send retrans="500">
    <![CDATA[
      INVITE sip:testroom@[remote_ip]:[remote_port] SIP/2.0
      Via: SIP/2.0/UDP [local_ip]:[local_port];branch=z9hG4bK-[pid]-[call_number]
      From: Participant [call_number] <sip:participant[call_number]@[local_ip]:[local_port]>;tag=[pid]SIPpTag[call_number]
      To: Conference Room <sip:testroom@[remote_ip]:[remote_port]>
      Call-ID: [call_id]
      CSeq: [cseq] INVITE
      Contact: <sip:participant[call_number]@[local_ip]:[local_port]>
      Max-Forwards: 70
      Subject: 3-Party Conference Test - Participant [call_number]
      Content-Type: application/sdp
      Content-Length: [len]

      v=0
      o=participant[call_number] 53655765 2353687637 IN IP4 [local_ip]
      s=SIPp Conference Client [call_number]
      c=IN IP4 [local_ip]
      t=0 0
      m=audio [media_port] RTP/AVP 0 8
      a=rtpmap:0 PCMU/8000
      a=rtpmap:8 PCMA/8000
      a=sendrecv
      a=participant-id:participant[call_number]
    ]]>
  </send>

  <!-- Expect 100 Trying (optional) -->
  <recv response="100" optional="true">
  </recv>

  <!-- Expect 200 OK from conference server -->
  <recv response="200" rtd="true">
    <action>
      <!-- Store conference participant count from SDP -->
      <ereg regexp="a=participants:([0-9]+)" search_in="body" check_it="true" assign_to="participant_count"/>
      <!-- Extract remote media port for RTP -->
      <ereg regexp="m=audio ([0-9]+)" search_in="body" check_it="true" assign_to="remote_media_port"/>
    </action>
  </recv>

  <!-- Send ACK -->
  <send>
    <![CDATA[
      ACK sip:testroom@[remote_ip]:[remote_port] SIP/2.0
      Via: SIP/2.0/UDP [local_ip]:[local_port];branch=z9hG4bK-[pid]-[call_number]-ack
      From: Participant [call_number] <sip:participant[call_number]@[local_ip]:[local_port]>;tag=[pid]SIPpTag[call_number]
      To: Conference Room <sip:testroom@[remote_ip]:[remote_port]>[peer_tag_param]
      Call-ID: [call_id]
      CSeq: [cseq] ACK
      Contact: <sip:participant[call_number]@[local_ip]:[local_port]>
      Max-Forwards: 70
      Content-Length: 0
    ]]>
  </send>

  <!-- Log conference joining -->
  <nop>
    <action>
      <log message="ðŸŽª Participant [call_number] joined conference (participants: [$participant_count])"/>
      <log message="ðŸ“¡ RTP session established on port [media_port] â†’ [$remote_media_port]"/>
    </action>
  </nop>

  <!-- Staggered conference participation -->
  <pause milliseconds="1000" test="[call_number]" op="eq" value="1"/>
  <pause milliseconds="2000" test="[call_number]" op="eq" value="2"/>
  <pause milliseconds="3000" test="[call_number]" op="eq" value="3"/>

  <!-- START REAL AUDIO TESTING PHASE -->
  <!-- This is where RTP audio streams flow between participants and conference server -->
  
  <!-- Log audio streaming start -->
  <nop>
    <action>
      <log message="ðŸŽµ Participant [call_number] starting RTP audio streaming..."/>
    </action>
  </nop>

  <!-- Audio streaming duration - participants stay different times -->
  <pause milliseconds="20000" test="[call_number]" op="eq" value="1"/>
  <pause milliseconds="15000" test="[call_number]" op="eq" value="2"/>
  <pause milliseconds="10000" test="[call_number]" op="eq" value="3"/>

  <!-- Log audio streaming end -->
  <nop>
    <action>
      <log message="ðŸŽµ Participant [call_number] stopping RTP audio streaming"/>
    </action>
  </nop>

  <!-- Send BYE to leave conference -->
  <send retrans="500">
    <![CDATA[
      BYE sip:testroom@[remote_ip]:[remote_port] SIP/2.0
      Via: SIP/2.0/UDP [local_ip]:[local_port];branch=z9hG4bK-[pid]-[call_number]-bye
      From: Participant [call_number] <sip:participant[call_number]@[local_ip]:[local_port]>;tag=[pid]SIPpTag[call_number]
      To: Conference Room <sip:testroom@[remote_ip]:[remote_port]>[peer_tag_param]
      Call-ID: [call_id]
      CSeq: [cseq] BYE
      Contact: <sip:participant[call_number]@[local_ip]:[local_port]>
      Max-Forwards: 70
      Content-Length: 0
    ]]>
  </send>

  <!-- Expect 200 OK for BYE -->
  <recv response="200" crlf="true">
  </recv>

  <!-- Log successful conference participation -->
  <nop>
    <action>
      <log message="âœ… Participant [call_number] successfully left conference"/>
      <log message="ðŸ“Š Total conference duration: [call_number] varied timing for overlap testing"/>
    </action>
  </nop>
  
  <!-- Response time calculation -->
  <ResponseTimeRepartition value="10, 20, 30, 40, 50, 100, 150, 200"/>
  <CallLengthRepartition value="10, 50, 100, 500, 1000, 5000, 10000"/>

</scenario> 