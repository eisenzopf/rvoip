use std::str::FromStr;

use crate::types::{
    uri::Uri,
    from::From,
    Address,
    TypedHeader,
    Param,
};
use crate::builder::{SimpleRequestBuilder, SimpleResponseBuilder};
use crate::builder::headers::HeaderSetter;

/// From header builder
///
/// This trait provides builder methods for the From header in SIP messages, as defined
/// in [RFC 3261 Section 20.20](https://datatracker.ietf.org/doc/html/rfc3261#section-20.20).
///
/// ## SIP From Header Overview
///
/// The From header field indicates the logical identity of the initiator of a request.
/// It consists of a display name, a URI, and optional parameters - most importantly
/// the tag parameter, which is used for dialog identification.
///
/// From headers are critical for:
/// - Identifying the sender of a SIP message
/// - Creating and maintaining dialogs between endpoints
/// - Routing responses to the appropriate destination
/// - Caller identification in telephony applications
///
/// ## Tag Parameter
///
/// The tag parameter is a random string that helps uniquely identify dialogs. It is:
/// - Required in responses and in-dialog requests
/// - Locally generated by each user agent
/// - Combined with Call-ID and To tag to form a dialog identifier
/// - Critical for distinguishing between multiple dialogs with the same Call-ID
///
/// ## Common Use Cases
///
/// - **User identification**: Identifying a caller in a telephony application
/// - **Dialog creation**: Establishing contexts for communication sessions
/// - **Call routing**: Ensuring responses are routed to the correct endpoint
/// - **Privacy mechanisms**: Supporting caller anonymization when needed
/// - **Federation**: Allowing communication between different domains
///
/// ## Real-world Applications
///
/// - **VoIP phones**: Identifying the caller in enterprise telephony
/// - **SIP trunking**: Presenting caller information across carrier boundaries
/// - **Contact centers**: Tracking agent identities during customer interactions
/// - **Conference systems**: Identifying participants in multi-party calls
///
/// # Examples
///
/// ## Enterprise IP Phone Registration
///
/// ```rust
/// use rvoip_sip_core::builder::SimpleRequestBuilder;
/// use rvoip_sip_core::builder::headers::FromBuilderExt;
/// use rvoip_sip_core::types::Method;
///
/// // Scenario: IP phone registering with a company PBX
///
/// // Create a REGISTER request with user identity
/// let register = SimpleRequestBuilder::new(Method::Register, "sip:pbx.company.example").unwrap()
///     .from("John Smith", "sip:jsmith@company.example", Some("reg45678"))
///     .to("John Smith", "sip:jsmith@company.example", None)
///     .contact("<sip:jsmith@192.0.2.15:5060>;transport=tcp>", None)
///     .build();
///
/// // PBX will use the From URI and tag to identify the registration
/// ```
///
/// ## Call Center Outbound Call
///
/// ```rust
/// use rvoip_sip_core::builder::SimpleRequestBuilder;
/// use rvoip_sip_core::builder::headers::FromBuilderExt;
/// use rvoip_sip_core::types::Method;
///
/// // Scenario: Contact center agent calling a customer
///
/// // Create an INVITE with agent and department information
/// let invite = SimpleRequestBuilder::new(Method::Invite, "sip:+15551234567@sip-trunk.example.net").unwrap()
///     .from("Customer Support", "sip:support@company.example", Some("cs8a970f"))
///     .to("Customer", "sip:+15551234567@sip-trunk.example.net", None)
///     .contact("<sip:agent42@10.0.0.42:5060>", None)
///     .build();
///
/// // The call will be presented to the customer with "Customer Support" as caller ID
/// ```
///
/// ## Conference System Response
///
/// ```rust
/// use rvoip_sip_core::builder::SimpleResponseBuilder;
/// use rvoip_sip_core::builder::headers::FromBuilderExt;
/// use rvoip_sip_core::builder::headers::cseq::CSeqBuilderExt;
/// use rvoip_sip_core::types::{StatusCode, Method};
///
/// // Scenario: Conference system responding to a participant join request
///
/// // Create a 200 OK response to an INVITE
/// let response = SimpleResponseBuilder::new(StatusCode::Ok, None)
///     .from("Conference Bridge", "sip:conf123@meetings.example.org", Some("mtg5678"))
///     .to("Participant", "sip:user@example.com", Some("u123"))
///     .cseq_with_method(101, Method::Invite)
///     .build();
///
/// // The From tag value will be used along with To tag and Call-ID for dialog identification
/// ```
pub trait FromBuilderExt {
    /// Add a From header with an optional tag parameter.
    ///
    /// Creates and adds a From header with the specified display name, URI, and optional tag.
    /// The From header identifies the logical sender of a SIP request, while the tag parameter
    /// is a random string used for dialog identification.
    ///
    /// # Parameters
    /// - `display_name`: The display name for the From header (e.g., "Alice Smith")
    /// - `uri`: The URI for the From header (e.g., "sip:alice@example.com")
    /// - `tag`: Optional tag parameter for dialog identification (required in responses)
    ///
    /// # Returns
    /// Self for method chaining
    ///
    /// # Examples
    ///
    /// ```rust
    /// use rvoip_sip_core::builder::SimpleRequestBuilder;
    /// use rvoip_sip_core::builder::headers::FromBuilderExt;
    /// use rvoip_sip_core::types::Method;
    ///
    /// // Create a request with a business calling card
    /// let request = SimpleRequestBuilder::new(Method::Invite, "sip:client@example.net").unwrap()
    ///     .from("Sales Department", "sip:sales@company.example", Some("sales-88fd71"))
    ///     .to("Potential Client", "sip:client@example.net", None)
    ///     .contact("<sip:agent12@10.0.1.12:5060>", None)
    ///     .build();
    ///
    /// // The From header will include display name, URI, and tag parameter
    /// // SIP: From: "Sales Department" <sip:sales@company.example>;tag=sales-88fd71
    /// ```
    fn from(self, display_name: &str, uri: &str, tag: Option<&str>) -> Self;
}

impl FromBuilderExt for SimpleRequestBuilder {
    fn from(self, display_name: &str, uri: &str, tag: Option<&str>) -> Self {
        match Uri::from_str(uri) {
            Ok(uri) => {
                let mut address = Address::new_with_display_name(display_name, uri);
                
                // Add tag if provided
                if let Some(tag_value) = tag {
                    address.params.push(Param::tag(tag_value));
                }
                
                self.header(TypedHeader::From(From::new(address)))
            },
            Err(_) => {
                // Best effort - if URI parsing fails, still try to continue with a simple string
                let uri_str = uri.to_string();
                let mut address = Address::new_with_display_name(display_name, Uri::custom(&uri_str));
                
                // Add tag if provided
                if let Some(tag_value) = tag {
                    address.params.push(Param::tag(tag_value));
                }
                
                self.header(TypedHeader::From(From::new(address)))
            }
        }
    }
}

impl FromBuilderExt for SimpleResponseBuilder {
    fn from(self, display_name: &str, uri: &str, tag: Option<&str>) -> Self {
        match Uri::from_str(uri) {
            Ok(uri) => {
                let mut address = Address::new_with_display_name(display_name, uri);
                
                // Add tag if provided
                if let Some(tag_value) = tag {
                    address.params.push(Param::tag(tag_value));
                }
                
                self.header(TypedHeader::From(From::new(address)))
            },
            Err(_) => {
                // Best effort - if URI parsing fails, still try to continue with a simple string
                let uri_str = uri.to_string();
                let mut address = Address::new_with_display_name(display_name, Uri::custom(&uri_str));
                
                // Add tag if provided
                if let Some(tag_value) = tag {
                    address.params.push(Param::tag(tag_value));
                }
                
                self.header(TypedHeader::From(From::new(address)))
            }
        }
    }
}

#[cfg(test)]
mod tests {
    use super::*;
    use crate::types::{Method, StatusCode};
    
    #[test]
    fn test_request_from_header() {
        // Test with valid URI
        let request = SimpleRequestBuilder::invite("sip:bob@example.com").unwrap()
            .from("Alice", "sip:alice@example.com", Some("tag1234"))
            .build();
            
        let from_header = request.from().unwrap();
        assert_eq!(from_header.address().display_name(), Some("Alice"));
        assert_eq!(from_header.address().uri().to_string(), "sip:alice@example.com");
        assert_eq!(from_header.tag(), Some("tag1234"));
        
        // Test without tag
        let request = SimpleRequestBuilder::invite("sip:bob@example.com").unwrap()
            .from("Alice", "sip:alice@example.com", None)
            .build();
            
        let from_header = request.from().unwrap();
        assert_eq!(from_header.tag(), None);
        
        // Test with invalid URI (should create a custom URI)
        let request = SimpleRequestBuilder::invite("sip:bob@example.com").unwrap()
            .from("Alice", "invalid-uri", Some("tag1234"))
            .build();
            
        let from_header = request.from().unwrap();
        assert_eq!(from_header.address().display_name(), Some("Alice"));
        assert!(from_header.address().uri().to_string().contains("invalid-uri"));
    }
    
    #[test]
    fn test_response_from_header() {
        // Test with valid URI
        let response = SimpleResponseBuilder::ok()
            .from("Alice", "sip:alice@example.com", Some("tag1234"))
            .to("Bob", "sip:bob@example.com", Some("tag5678"))
            .call_id("test-call-id")
            .cseq(1, Method::Invite)
            .build();
            
        let from_header = response.from().unwrap();
        assert_eq!(from_header.address().display_name(), Some("Alice"));
        assert_eq!(from_header.address().uri().to_string(), "sip:alice@example.com");
        assert_eq!(from_header.tag(), Some("tag1234"));
        
        // Test without tag
        let response = SimpleResponseBuilder::ok()
            .from("Alice", "sip:alice@example.com", None)
            .to("Bob", "sip:bob@example.com", Some("tag5678"))
            .call_id("test-call-id")
            .cseq(1, Method::Invite)
            .build();
            
        let from_header = response.from().unwrap();
        assert_eq!(from_header.tag(), None);
        
        // Test with invalid URI (should create a custom URI)
        let response = SimpleResponseBuilder::ok()
            .from("Alice", "invalid-uri", Some("tag1234"))
            .to("Bob", "sip:bob@example.com", Some("tag5678"))
            .call_id("test-call-id")
            .cseq(1, Method::Invite)
            .build();
            
        let from_header = response.from().unwrap();
        assert_eq!(from_header.address().display_name(), Some("Alice"));
        assert!(from_header.address().uri().to_string().contains("invalid-uri"));
    }
} 