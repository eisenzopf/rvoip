#[derive(Debug, Clone, PartialEq, Eq, Hash)]
pub enum HeaderName {
    Accept,
    AcceptEncoding,
    AcceptLanguage,
    AlertInfo,
    Allow,
    AuthenticationInfo,
    Authorization,
    CallId,
    CallInfo,
    Contact,
    ContentDisposition,
    ContentEncoding,
    ContentLanguage,
    ContentLength,
    ContentType,
    CSeq,
    Date,
    ErrorInfo,
    Expires,
    From,
    InReplyTo,
    MaxForwards,
    MimeVersion,
    MinExpires,
    Organization,
    Priority,
    ProxyAuthenticate,
    ProxyAuthorization,
    ProxyRequire,
    RecordRoute,
    ReplyTo,
    Require,
    RetryAfter,
    Route,
    Server,
    Subject,
    Supported,
    Timestamp,
    To,
    Unsupported,
    UserAgent,
    Via,
    Warning,
    WwwAuthenticate,
    Other(String),
}

pub enum TypedHeader {
    Accept(types::Accept),
    Allow(types::Allow),
    ReplyTo(types::reply_to::ReplyTo),
    Warning(types::Warning),
    ContentDisposition(types::ContentDisposition),
    ContentEncoding(Vec<String>),
    ContentLanguage(Vec<String>),
    AcceptEncoding(Vec<types::accept::EncodingInfo>),
    AcceptLanguage(Vec<types::accept::LanguageInfo>),
    MinExpires(u32),
    MimeVersion((u32, u32)),
    Require(Vec<String>),
    Supported(Vec<String>),
    Unsupported(Vec<String>),
    ProxyRequire(Vec<String>),
    Date(chrono::DateTime<chrono::FixedOffset>),
    Timestamp((ordered_float::NotNan<f32>, Option<ordered_float::NotNan<f32>>)),
    Organization(String),
    Priority(types::priority::PriorityValue),
    Subject(String),
    Server(Vec<types::server::ServerVal>),
    UserAgent(Vec<types::server::ServerVal>),
    InReplyTo(Vec<String>),
    RetryAfter((u32, Option<String>, Vec<types::retry_after::RetryParam>)),
    ErrorInfo(Vec<types::error_info::ErrorInfoValue>),
    AlertInfo(Vec<types::alert_info::AlertInfoValue>),
    CallInfo(Vec<types::call_info::CallInfoValue>),
    Other(HeaderName, HeaderValue),
} 